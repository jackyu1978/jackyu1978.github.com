<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰克的烦恼</title>
    <link>http://jackyu1978.github.io/categories/</link>
    <description>Recent content on 杰克的烦恼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 28 Dec 2015 19:20:03 +0800</lastBuildDate>
    <atom:link href="http://jackyu1978.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>安全产品之网络行为审计</title>
      <link>http://jackyu1978.github.io/2015/12/28/product-audit/</link>
      <pubDate>Mon, 28 Dec 2015 19:20:03 +0800</pubDate>
      
      <guid>http://jackyu1978.github.io/2015/12/28/product-audit/</guid>
      <description>

&lt;p&gt;我进入安全行业首先接触到的就是“网络行为审计（管理）系统”，所以对它有特别的感情。 08年刚进入公司时首先接手的就是公司主打产品网络行为审计系统的服务端开发，由于前期产品开发较仓促，所以整个服务端很多地雷，一不小心就掉坑里。无论是系统架构设计、协议设计、后端数据库设计都有很多缺陷，当熟悉了这套系统后也对局部进行了很多优化改造，终于也达到了生产销售的标准。然后就是在各地跟第三方的后台系统对接，调试协议接口，当时调得最多的就是任子行，还有雨人。到后面这套后台系统也就我比较熟悉了。&lt;/p&gt;

&lt;h2 id=&#34;网络审计系统的技术特点:bd617c319cb973697579a81cf7fab7fb&#34;&gt;网络审计系统的技术特点&lt;/h2&gt;

&lt;p&gt;但当时的销售情况是，审计探针（抓包、协议分析）设备是卖钱的，审计服务端就免费送，当然如果没有服务端，探针也是卖不出去的。所以当时服务端主要是解决一个有无的问题，而公司的人力也主要投入在探针系统的开发，探针的开发还是挺有技术含量的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络抓包&lt;/strong&gt;，探针系统的基础就是网络抓包，一般探针系统采用旁路部署，但对性能要求也是极高的，特别是要保证不能掉包，不然后面的协议还原就难了。当时主流还是基于X86架构的100M审计系统，抓包一般还是采用libpcap,到后期的1000M就各种优化，采用0拷贝技术提高抓包性能等，就开始使用netmap和dpdk等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议还原&lt;/strong&gt;，抓取的包要根据网络协议封包一层层剥离成上层的http、ftp、telnet等上层协议。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议分析&lt;/strong&gt;，光还原成上层协议还不行，还需要更进一步还原具体应用内容，如邮件内容，聊天内容，发帖内容，网络浏览记录等，把对应的协议中发送的内容和中端用户关联起来，变成可读的网络用户操作行为。这其中比较难的就是QQ内容等加密内容的解密，一直到我离开公司好像这块都还没太好的解决。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规则匹配&lt;/strong&gt;，网络行为审计是支持规则（关键词等）的批评的，这就是有目标的审计，根据规则发现违规行为，发送报警等。在海量的网络流量中批评特定的规则或关键词，这对匹配算法也是有极高要求的。当时100M时主要还是用WM，MWM算法，后期做过多次优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速响应&lt;/strong&gt;，网络中的应用随时升级，也随时有新应用协议出现，怎么对这些协议的改变和增加做出快速响应呢？这就需要有一个开放，可配置的协议分析引擎，当协议分析人员分析清楚协议特征后就可以快速根据模板语言定制出解析模板。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;纵观国内网络安全产品，如：防火墙、IDS、IPS、WAF等，大多是在开源产品基础上开发一套界面，定制些规则就可以了。但网络行为审计产品却有些不同，因为涉及到网络协议的各个层，需要做到协议的各层还原，需要更多的定制开发，性能优化，协议分析工作，还是很有技术含量的。所以也特别佩服当时公司的郑总、老方、老余等审计大牛。&lt;/p&gt;

&lt;h2 id=&#34;审计产品的作用:bd617c319cb973697579a81cf7fab7fb&#34;&gt;审计产品的作用&lt;/h2&gt;

&lt;p&gt;加强上网管理，兴利除弊通过有效的技术手段实现有效的管理，从而达到安全效果。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全问题：&lt;/strong&gt;在互联网应用方面，HTTP、SMTP、FTP、POP3等协议，几乎每天都面临不同的安全风险，而这些应用协议正是企业每天都在用的；而病毒、蠕虫、垃圾邮件、木马程序、间谍软件、网络钓鱼等恶意行为也在伺机攻击学校的IT系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保密问题：&lt;/strong&gt;学校、公司、政府、各种机构的资料、未公开的核心技术、个人信息等具有非常高的机密性文件，可以轻易的通过Email、QQ、MSN、BBS等网络通信渠道外发，可能造成泄密。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理问题：&lt;/strong&gt;反动、色情、网络游戏、聊天交友、BT下载、在线音乐、在线电影等不正当的网络行为不但蚕食着员工的思想和时间，更占用了企业大量的带宽资源，给企业正常的网络业务带来极大的影响。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;审计产品的客户:bd617c319cb973697579a81cf7fab7fb&#34;&gt;审计产品的客户&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;企业或机构客户：&lt;/strong&gt;上网行为审计系统能够透明地审计并管理员工的上网行为，屏蔽黄、赌、毒、邪教、黑客等不良网站，同时能够很好地满足来自信息安全市场的多种需求，例如政府、教育、企业等客户，从而达到提升教育形象、化解潜在的法律责任、提高企业的工作效率、营造绿色校园网络环境的目的，形成横跨多种行业的专业安全审计方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;政府客户：&lt;/strong&gt;能满足公安网监部门对联网用户上网行为审计备案的要求，为调查网络犯罪，提供了有力的取证信息和技术支持。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;审计产品发展面临的问题:bd617c319cb973697579a81cf7fab7fb&#34;&gt;审计产品发展面临的问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;个人隐私：&lt;/strong&gt;传统审计产品主要还是被用来监控，如老板监控员工，在社会越来越发展，法制越来越健全的情况下，这可能会涉及到个人隐私保护的问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加密算法：&lt;/strong&gt;由于现在的商用系统对安全及个人数据的保护力度加强，加密算法大面积应用，这也就加大了审计系统还原网络内容的难度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能瓶颈：&lt;/strong&gt;传统审计产品把大量协议还原，规则匹配运算放在探针，且现在网络带宽增长迅速，这对探针性能提出了极高的要求。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;审计产品发展思路设想:bd617c319cb973697579a81cf7fab7fb&#34;&gt;审计产品发展思路设想&lt;/h2&gt;

&lt;p&gt;根据个人对审计产品的了解，提出以下两点初浅假设：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;轻审计，重分析：&lt;/strong&gt;企业老板对员工的上网行为监控，是怕员工泄露公司机密，但这同样造成了雇佣关系的紧张和不信任，并不会为企业老板创造效益，搞不好会起反作用。那么审计系统以后是否可以轻审计（规避个人隐私），而重视企业员工或客户行为的汇总分析呢？为老板优化公司网络管理提供决策依据呢？基于员工的上网行为我们是否可以更侧重员工上网行为特点的分析，而轻内容审计，在此基础上为老板进行更人性化的管理提供依据呢？比如一个员工经常浏览医疗网站，是否这个员工自己或家人有人生病，需要公司关怀呢？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轻探针，重中心：&lt;/strong&gt;随着网络发展，带宽越来越大，单探针的性能提升毕竟有限，在产品架构上应该改变原来的思路。应将探针的功能尽量单一化，甚至只是抓包或做一点简单处理，尽量保证探针的简单及稳定。大量的协议还原，及后期的分析运算放到中心计算平台，这样的架构也是为了符合轻审计，重分析的思路。大量的数据汇集到中心后，分析算法可以随时更新，定制。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>工作中的鸡群效应</title>
      <link>http://jackyu1978.github.io/2015/12/27/chicken-group-effect/</link>
      <pubDate>Sun, 27 Dec 2015 19:05:26 +0800</pubDate>
      
      <guid>http://jackyu1978.github.io/2015/12/27/chicken-group-effect/</guid>
      <description>&lt;p&gt;普度大学一位名叫威廉缪尔的生物进化学家研究了鸡群。他对生产率很感兴趣,但计算鸡的生产率很简单，只需要数数鸡蛋就行了。他想要知道如何提高鸡的生蛋率，所以他设计了一个巧妙的实验。鸡都是群居的，所以他先选择了一群普通的鸡,然后他让这一群鸡独自生存繁衍直到第六代。然后他又用生产力最强的鸡创建了第二个鸡群，你可以叫它们“超级鸡”，他将超级鸡放在一起成了“超级鸡群”，然后在每一代里，他都选择最高产的鸡来繁衍。在经过六代以后，他发现了什么呢？第一群普通的鸡，表现都还不错,它们都身形结实，羽翼丰满,并且鸡蛋的产量急剧增加。而第二群呢？除了三只以外全死了,那三只鸡把其他的鸡都啄死了。这些个个高产的鸡只是通过挤兑同伴才获得了成功。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这就是鸡群效应&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在，我走遍世界，在各类组织和公司里讲述这个故事，人们几乎立刻就看出了其中的关联，然后都跑来对我说这样的话：“我们公司就是那个超级鸡群。”有的说：“那就是我的国家。”还有的说，“那就是我的人生。”我的一生中都被告知要获得成功只有不断的竞争：进好的学校，找好的工作，要做人上人。但我从没觉得这些话有多激励人。我开始为我自己的事业奋斗，因为创造是快乐的，也因为与许多优秀的、有创造力的人并肩奋斗本身就是一
种回报。我自己从来不会通过挤兑他人或从“超级鸡”或超级大明星那获得激励。但是50多年过去了，我们用超级鸡的模式经营了大多数组织和很多社会。我们曾觉得成功靠的是挑选顶尖人才，把那些最聪明的男人或者女人放在一起，然后给他们所有的资源和权利。结果也和威廉的实验如出一辙：那些拔尖者野心勃勃，组织功能失调，还出现了各种资源的浪费。如果实现高生产率的唯一途径是通过抑制对手生产率的话，那我们就更加迫切的需要另外一条路和更多样的方法去生存。&lt;/p&gt;

&lt;p&gt;那么，到底是什么造就了一些团队比其它的更加成功、更加高效呢？这也是麻省理工学院的一个研究团队提出的问题。他们邀请了几百名志愿者，将他们分成几组，让他们解决非常困难的问题。结果与你期望的一样，其中一些团队比另外一些优秀很多。但真正有趣的是，表现优异的团队并不是拥有一两个超高智商的团队，也不是那些整体智商水平最高的团队。反之，那些成功的团队都有三个特点.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一，他们都有着较高的社交灵敏度。这是由一种“由眼及心”的测试检验出来的。它被广泛的理解为同理心测试，在这个测试里获得高分的团队解决问题的表现更优异。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第二，成功的团队给了每个人同样的时间，这样就没有任何人会成为主导，也没有任何人有机会搭便车。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第三，成功的团队里都有更多的女性员工。是不是因为女性通常在“由眼及心”测试里得分更高，所以他们所在的团队具有双倍的同理心？或者是因为她们用更多的视角看问题？这个问题我们还无从知晓，然而重要的是这个实验证实了我们的理论：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;那些团队表现优异的关键在于每个人和队友的关系。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重要的是砌砖的泥浆，而不是砖！！！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么这个原理是怎样在现实中体现的？这意味着人与人之间的互动非常重要，因为在成员之间高度契合和反应灵敏的团队里创意才会涌动并且发展壮大。人们不会被某个想法困扰住，不会浪费精力钻牛角尖。举个例子：Arup是世界上最成功的工程公司之一，它是北京奥运会马术中心的建造商。现在，这个建筑必须容纳2500匹刚由长途飞机运送过来的高质量的纯种马，这些马儿有很严重的时差，身体状况也并不算好。而工程师面临的问题是要应付多少马粪？这个在工程学院可没有学过，但是谁也不想把这个问题搞砸。其实他本可以花上几个月时间和兽医交流，做各种研究，调整电子数据表。但实际上他四处寻求帮助,找到了一个曾经设计过纽约赛马场的人，问题用了不到一天就解决了。Arup相信他们成功的精髓是互帮互助的文化。互帮互助听起来很没士气，但它在成功的团队里至关重要，其作用往往胜过个体的智慧。互帮互助意味着“我没有必要了解所有事”,我只需要在一群愿意寻求并给予帮助的人之间工作。&lt;/p&gt;

&lt;p&gt;在SAP（德国软件公司），他们记得一个人可以在17 分钟之内回答任何问题。但是，从没有一个和我合作过的高科技公司曾经觉得这是个技术问题，因为驱使大家互助的正是彼此间的互相了解。既然互助听起来那么浅显，让我们觉得它会自然发生，但并非如此。当我在经营第一家软件公司时，我意识到我们陷入了困境。除了许多摩擦就没有别的了，后来我渐渐意识到，我雇的那些聪明又有创造力的人并不了解彼此。他们将全部的精力都投入了彼
此的工作，他们甚至都不知道是谁坐在他们旁边，只有当我坚持让大家停掉工作花些时间去认识他人的时候，我们才取得了一些突破性的进展。那是20 年以前的事儿了，如今我访问的公司都不允许员工在桌上放咖啡杯，因为公司希望人们能够走到咖啡机前与人交流。在瑞士，甚至有个与之相关的专有名词，他们管这叫做fika，意思是超越茶歇的活动，也表示集体的休整。在缅因州的Idexx 公司，他们在园区里修了一个菜园，让所有部门的人能够凑
到一起干活儿，并且了解整个公司的运营状况。是这些人都疯了吗？恰恰相反，他们知道了当事情进展不顺时，事情总会这样难以避免。&lt;/p&gt;

&lt;p&gt;如果你做的是非常有突破性和重要的工作，人们需要的是社交上的支持，也需要知道他们可以向谁求助。公司造不出创意，只有人可以。真正激励人的是彼此间建立的联系、忠诚和信任。重要的是砂浆，而不只是砖头。当你将两者放在一起，就是所谓的社会资本。它是一种信赖和依存，能够建立信任。这个名词来自于一位社会学家，他对社区的研究证明了社会在紧张时期具备更高的适应性。社会资本可以让公司稳固，也可以使公司更有活力。而它有什么实际意义吗？它代表时间就是一切，社会资本会随着时间增加。所以团队磨合的越久就工作的越好，因为要让人真正坦诚和坦率，就需要时间来建立信任。&lt;/p&gt;

&lt;p&gt;时间会造就价值。当AlexPentland在建议一家公司整合茶歇时间，让所有人都有时间去和别人交流时，公司的利润增加了1500万美元，并且雇员满意度上升了10%。这份社会资本的回报还不赖吧，而且甚至它在消耗的过程中还会不断增加。这里不涉及裙带关系，也没有懒人的位置，因为这样去做的人总是会有些毛毛躁躁,急功近利，心里只有自己，因为他们觉得这才能体现出自己的价值。有时冲突会频繁，但这样的坦率总是好的，因为这是一个尚可的点子变成杰作的过程，没有哪个点子生来就完美。它就像新生儿的诞生一样，有点混乱、困惑，但是未来充满可能。在接受外界慷慨的帮助，有了信念战胜挑战之后才能发挥出它们最大的潜能，这就是社会资本所支持的。&lt;/p&gt;

&lt;p&gt;但我们很少谈论这个话题，很少用这种方式谈论智慧和创造力。我们习惯谈论明星员工,所以我开始想，如果我们开始以这种方式培养人才，是不是就不会再有明星员工了呢？所以当我在欣赏伦敦皇家艺术学院戏剧的试演时，眼前的一切真的让我很惊讶。因为教授们并不看重个人的表演能力，他们看重的是学生之间那种互动，因为戏剧就是这样产生的。而当我与一些畅销专辑的制作人交谈时，他们说，“当然了，我们有很多音乐巨星。只不过他们的名气并没有持续很久。合作性非常强的人，在事业上往往可以做得更久，
因为当他们激励别人做到最好的同时，也往往将最好的自己呈现出来。
”当我访问那些以独特性和创造性闻名的公司，我甚至并没有看到什么明星员工，因为每个人都很重要。当我反思自己的事业，以及我有幸合作的出色的同事时，我意识到如果我们放弃做“超级鸡”的话，我们其实可以给予对方更多。一旦你们真正理解人与人之间的互动，很多问题就会迎刃而解。&lt;/p&gt;

&lt;p&gt;人才竞赛类型的管理哲学总是鼓励员工们互相竞争。如今社会资本已经代替了竞争。几十年来，我们试过用金钱去激励人们，尽管已有大量的研究表明，金钱将破坏人与人之间的社会连接。现在，我们应该让人们互相激励。多年来，我们认为领导者应该像救世主那样独自解决复杂的难题。如今，我们应该重新定义领导力，领导力就是有能力去创造一种环境，让其中的每个人都能集思广益。我们知道这行得通。&lt;/p&gt;

&lt;p&gt;蒙特利尔协定书提倡逐步禁用氟氯烃，因为氟氯烃会导致臭氧空洞，这样的风险是极大的，氟氯烃无处不在，而且没有人清楚能否找到替代品。但是有个团队迎接了挑战并采用了三个关键原则。工程学院的院长Frank Maslen 这样说：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一，团队里不应该有明星队员,我们需要每个人,每个人都有独到的见解。&lt;/li&gt;
&lt;li&gt;第二，我们做事只遵循一个标准：没有最好，只有更好。&lt;/li&gt;
&lt;li&gt;第三，他告诉他的老板Geoff Tudhope,不应该进行干涉，因为Frank 明白干涉别
人的破坏力不容忽视。当然，这并不意味着Tudhope 只能毫无作为。他要保证团队的正常运作，也会倾听团队的意见并确保他们遵守原则。这招奏效了：Tudhope 的公司在处理这个棘手问题时的表现，远远超越了其他公司，他们首先获得了成功。到目前为止，蒙特利尔协定书是执行最成功的国际环境公约。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;之前有好多亟待处理的事情，现在也一样。如果我们仅仅寄希望于一两个超人，那么肯定不能解决问题。现在我们需要每一个人，因为只有我们承认每个人有价值，才能充分释放我们需要的能量、想象力和动力，创造出一片新天地。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;来源：&lt;/strong&gt;&lt;a href=&#34;http://open.163.com/movie/2016/1/2/E/MB9CG8A05_MB9F0SM2E.html&#34;&gt;玛格丽特霍夫曼TED演讲&amp;ndash;《工作中的鸡群效应》&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nginx调优</title>
      <link>http://jackyu1978.github.io/2015/12/26/ngix-better/</link>
      <pubDate>Sat, 26 Dec 2015 19:49:42 +0800</pubDate>
      
      <guid>http://jackyu1978.github.io/2015/12/26/ngix-better/</guid>
      <description>

&lt;p&gt;nginx作为一款知名的高性能web服务器、代理服务器，使用nginx和linux的默认配置一般就可以达到很不错的性能。但在有些特殊情况下我们需要对nginx和系统的配置做些调整以达到更高的并发，更大的吞吐量。本篇文章就讨论下有哪些配置可以调整。&lt;/p&gt;

&lt;h1 id=&#34;概述:099bbab29b4aced9712dde63bfe685af&#34;&gt;概述&lt;/h1&gt;

&lt;p&gt;由于需要调整nginx和linux的参数，所以首先需要大家对nginx和linux系统相关的配置有些基本了解，这样才能更好理解这些配置调整的目的。&lt;/p&gt;

&lt;p&gt;另外在实际调整的时候，请遵循一个规则：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“一次只调整一个参数，然后对比看性能有没有提升，如果没有提升请改回默认配置。”&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;调整linux配置:099bbab29b4aced9712dde63bfe685af&#34;&gt;调整linux配置&lt;/h1&gt;

&lt;p&gt;目前linux系统（2.6+）的默认配置满足正常的大部分使用场景，但改变一些参数的设置也可以相应提高性能。&lt;/p&gt;

&lt;h2 id=&#34;调整backlog队列:099bbab29b4aced9712dde63bfe685af&#34;&gt;调整Backlog队列&lt;/h2&gt;

&lt;p&gt;下面的设置可以调整linux的网络链接处理的性能，如果大量链接被挂起，可以尝试调整下面的参数：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;net.core.somaxconn:nginx可以accept的最大链接数队列。缺省值经常都较小，但nginx处理accetp的速度又很快。如果你的网站并发数大的话，可以尝试调整该参数。有时候该值太小linux kernel 日志中会有错误信息，可以增加该参数的值，直到错误消失。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;如果该值设置的大于512的时候，相应的改变nginx listen指令中backlog的值与之对应&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;net.core.netdev_max_backlog:网络包在被CPU处理之前被网卡缓存的比率。当带宽较大时，增大该值可以提高性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;调整文件描述符:099bbab29b4aced9712dde63bfe685af&#34;&gt;调整文件描述符&lt;/h2&gt;

&lt;p&gt;文件描述符是系统表示网络链接和打开文件的一种系统资源。当nginx在代理模式时，一个请求需要占用两个文件描述符，一个表示客户端的链接，一个代表到被代理服务器的网络链接。当系统处理大量链接的时候，相关的参数需要做调整：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sys.fs.file_mas:系统最大文件描述符限制&lt;/li&gt;
&lt;li&gt;nofile:用户描述符限制，在/etc/security/limits.conf文件中设置&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;零时端口:099bbab29b4aced9712dde63bfe685af&#34;&gt;零时端口&lt;/h2&gt;

&lt;p&gt;nginx作为代理的时候，每个到upstream服务器的链接都要占用一个零时端口，可以调整下面的值优化：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;net.ipv4.ip_local_port_range:本地端口起始-结束范围，如果你发现提示没有零时端口可用，就可以增大这个范围。通常的可以设置 1024-65000&lt;/li&gt;
&lt;li&gt;net.ipv4.tcp_fin_timeout:零时端口可被重用的超时时间。缺省是60秒，通常可以缩短到30或15秒&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;调整nginx的配置:099bbab29b4aced9712dde63bfe685af&#34;&gt;调整nginx的配置&lt;/h1&gt;

&lt;p&gt;下面列出一些会影响nginx性能的指令和配置项&lt;/p&gt;

&lt;h2 id=&#34;工作进程数:099bbab29b4aced9712dde63bfe685af&#34;&gt;工作进程数&lt;/h2&gt;

&lt;p&gt;nginx可以同时启动多个进程，每个进程处理一定的网络链接，你可以控制启动的工作进程数及他们处理网络链接的方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;worker_processes:工作进程数，缺省值1.通常一个CPU核心可以分配一个工作进程，其值可以设置成CPU核心数。如果程序中需要处理很多的磁盘I/O,可以适当调大该值。&lt;/li&gt;
&lt;li&gt;worker_connections:每个工作进程可以处理的最大并发链接数。缺省值是512，但是系统一般有充分的资源可以支持更大的链接数。最佳值一般依赖服务器性能和网络状况，可以多次修改测试对比。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;keepalive设置:099bbab29b4aced9712dde63bfe685af&#34;&gt;Keepalive设置&lt;/h2&gt;

&lt;p&gt;keepalive链接可以很大程度上减少CPU和网络负载，不用频繁创建和关闭链接。nginx在客户端链接和upstream链接中都支持Keepalive选项。下面的指令是跟客户端链接有关的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keepalive_request:一个keepalive长链接中，客户端可以发起的请求数，缺省值是100。&lt;/li&gt;
&lt;li&gt;keepalive_timeout:keepalive空闲超时时间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面的指令和upstream链接有关：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;keepalive&amp;ndash;每个工作进程保持到上游服务器的空闲KeepAlive连接数。没有默认值。
为了启用到upstream服务器的长连接，还必须包含以下指令：&lt;/p&gt;

&lt;p&gt;proxy_http_version 1.1;&lt;br /&gt;
proxy_set_header Connection &amp;ldquo;&amp;rdquo;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;记录访问日志:099bbab29b4aced9712dde63bfe685af&#34;&gt;记录访问日志&lt;/h2&gt;

&lt;p&gt;记录每个请求的日志会消耗CPU和磁盘I/O,为了减少消耗可以开启访问日志记录缓存。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在access_log指令中添加buffer=*size*参数&lt;/li&gt;
&lt;li&gt;在access_log指令中添加flush=*time*参数&lt;/li&gt;
&lt;li&gt;当工作进程打开或关闭日志文件时，也会记录对应的日志，可以在access_log指令中添加off参数关闭&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sendfile:099bbab29b4aced9712dde63bfe685af&#34;&gt;Sendfile&lt;/h2&gt;

&lt;p&gt;操作系统的sendfile()系统调用可以零拷贝将数据从一个文件描述符拷贝到另一个描述符，这可以提高TCP数据传输。这可以通过在http、server、location上下文中添加sendfile指令让nginx使用它。因为sendfile拷贝数据不通过用户空间，所以会破坏nginx的处理连和改变内容的过滤，比如输出gzip。当同时配置了sendfile指令和改变内容指令过滤器时，nginx自动让sendfile指令失效。&lt;/p&gt;

&lt;h2 id=&#34;对请求做限制:099bbab29b4aced9712dde63bfe685af&#34;&gt;对请求做限制&lt;/h2&gt;

&lt;p&gt;可以对客户端请求做一些限制，以防止消耗过多资源。这同时可以提高性能和安全性，相关指令如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;limit_conn和limmit_conn_zone:限制客户端链接数&lt;/li&gt;
&lt;li&gt;limit_rate:限制对客户端的响应发送速率&lt;/li&gt;
&lt;li&gt;limit和limit_req_zone:限制请求速率&lt;/li&gt;
&lt;li&gt;max_conns，upstream配置块中server指令的一个参数，设置upstream服务器的并发链接数，如果设置为0（缺省为0），则表示没限制&lt;/li&gt;
&lt;li&gt;queue(nginx plus):设置当所有upstream服务器都达到max_conns限制时，队列中的最大请求数。如果没有这个参数，请求不会被放入队列中&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;缓存和压缩:099bbab29b4aced9712dde63bfe685af&#34;&gt;缓存和压缩&lt;/h2&gt;

&lt;h3 id=&#34;缓存:099bbab29b4aced9712dde63bfe685af&#34;&gt;缓存&lt;/h3&gt;

&lt;p&gt;开启缓存可以减小upstream server的负载，提高响应速度&lt;/p&gt;

&lt;h3 id=&#34;压缩:099bbab29b4aced9712dde63bfe685af&#34;&gt;压缩&lt;/h3&gt;

&lt;p&gt;对响应进行压缩可以减小带宽消耗，但压缩会消耗CPU资源，但一般来说带宽比CPU贵。而对已一些已经压缩过的内容，如JPEG文件，就不用再压缩了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考文章：&lt;/strong&gt;&lt;a href=&#34;https://www.nginx.com/blog/tuning-nginx/&#34; title=&#34;tuning-nginx&#34;&gt;tuning-nginx&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CAS实现SSO的关键概念及流程</title>
      <link>http://jackyu1978.github.io/2015/12/25/cas/</link>
      <pubDate>Fri, 25 Dec 2015 19:35:58 +0800</pubDate>
      
      <guid>http://jackyu1978.github.io/2015/12/25/cas/</guid>
      <description>

&lt;p&gt;CAS实现SSO一般包含多个CAS客户端和一个CAS服务端，客户端嵌入在特定的Web服务中（CAS services），服务端单独部署。CAS服务端保持用户及授权信息负责认证用户，及对应用的访问授权；CAS客户端负责保护应用并从CAS服务端获取用户信息。&lt;/p&gt;

&lt;h1 id=&#34;主要概念:dd0359c9bd9a6383521f6f985cb20765&#34;&gt;主要概念&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;TGT：&lt;/strong&gt;票据授权票据（Ticket Granting Ticket），存储在CASTGC Cookie中，代表一个用户的SSO回话。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ST：&lt;/strong&gt;服务票据（Service Ticket),通过Get参数传输，代表CAS服务端对特定用户，特定应用的访问授权。授权成功，对应应用生产会话后失效。&lt;/p&gt;

&lt;h1 id=&#34;cas登录认证web流程图:dd0359c9bd9a6383521f6f985cb20765&#34;&gt;CAS登录认证Web流程图&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://jasig.github.io/cas/4.0.x/images/cas_flow_diagram.png&#34; alt=&#34;流程图&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;cas代理认证web流程图:dd0359c9bd9a6383521f6f985cb20765&#34;&gt;CAS代理认证Web流程图&lt;/h1&gt;

&lt;p&gt;CAS协议还支持一种代理方式，一个CAS service充当另一个CAS service的代理，传输用户凭证。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jasig.github.io/cas/4.0.x/images/cas_proxy_flow_diagram.jpg&#34; alt=&#34;代理流程图&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用nginx防御DDoS攻击</title>
      <link>http://jackyu1978.github.io/2015/12/24/ngix-ddos/</link>
      <pubDate>Thu, 24 Dec 2015 22:16:41 +0800</pubDate>
      
      <guid>http://jackyu1978.github.io/2015/12/24/ngix-ddos/</guid>
      <description>

&lt;p&gt;nginx有很多特性可以用来有效防御DDoS攻击&lt;/p&gt;

&lt;h2 id=&#34;限制请求频率:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;限制请求频率&lt;/h2&gt;

&lt;p&gt;DDoS攻击的攻击者的请求频率肯定会大于真实用户请求的频率，这样才能起到攻击的目的，如实我们就可以利用nginx来限制客户端请求的频率，具体设置的阈值可以根据实际业务场景及以前的经验值来确定。
比如你可以配置nginx限制同一IP地址对login页面的请求为每次/2秒（折算成一分钟就是最大30次），超过这个阈值nginx就会阻断：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;

server {
...
    location /login.html {
        limit_req zone=one;
    ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;limit_req_zone指令配置一段名字为 &lt;strong&gt;one&lt;/strong&gt; 的共享内存区域，来存储请求状态，关键字为客户端IP($binary_remote_addr)。&lt;strong&gt;/login.html&lt;/strong&gt; 的location块中的limit_req指令引用该共享内存区域。&lt;/p&gt;

&lt;h2 id=&#34;限制链接数:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;限制链接数&lt;/h2&gt;

&lt;p&gt;DDoS的攻击者往往发起大量的网络链接，以期起到攻击目的。所以我们可以限制每个单IP客户端的链接数，甚至可以限制每个客户端IP可以发起到网站特定区域或路径的链接数。比如：限制每个开发可以发起到&lt;strong&gt;/store&lt;/strong&gt;区域的链接数为10：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;limit_conn_zone $binary_remote_addr zone=addr:10m;

server {
...
    location /store/ {
        limit_conn addr 10;
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;limit_conn_zone指令配置一段名字为 &lt;strong&gt;addr&lt;/strong&gt; 的共享内存区域，来存储请求状态，关键字为客户端IP($binary_remote_addr)。&lt;strong&gt;/store&lt;/strong&gt; 的location块中的limit_conn指令引用该共享内存区域,并限制每个IP的链接数最大为10。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：国内很多用户都是通过NAT上网，同一个局域网中的用户出口IP是一样的，所以在设置链接数限制时，要考虑这种情况，不然可能会导致服务不可用！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;关闭慢速链接:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;关闭慢速链接&lt;/h2&gt;

&lt;p&gt;Http慢速攻击往往也是DDoS攻击中一种常见的攻击形式，利用nginx的&lt;strong&gt;client_body_timeout&lt;/strong&gt; 和 &lt;strong&gt;client_header_timeout&lt;/strong&gt;指令也可以防护这方面的攻击：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    client_body_timeout 5s;
    client_header_timeout 5s;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;client_body_timeout指令：控制客户端在两次发送Body数据之间的间隔。&lt;/p&gt;

&lt;p&gt;client_header_timeout指令：控制客户端在两次发送http头数据之间的间隔。&lt;/p&gt;

&lt;h2 id=&#34;设置ip地址黑名单:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;设置IP地址黑名单&lt;/h2&gt;

&lt;p&gt;如果你已经确定某个客户端IP正在发动攻击，可以通过设置IP地址黑名单的方式加以阻断。&lt;/p&gt;

&lt;p&gt;设置IP地址段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
deny 123.123.123.0/28;
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置单个IP地址：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
    deny 123.123.123.3;
    deny 123.123.123.5;
    deny 123.123.123.7;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;设置ip地址白名单:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;设置IP地址白名单&lt;/h2&gt;

&lt;p&gt;如果你的网站只允许特定区域的用户访问，就可以采用设置白名单的方式加以保护：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
    allow 192.168.1.0/24;
    deny all;  #阻断除白名单外的其他客户端访问
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;利用缓存机制来减少后端服务请求:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;利用缓存机制来减少后端服务请求&lt;/h2&gt;

&lt;p&gt;我们可以配置nginx来缓存内容，以此来减少到后端服务器的请求，达到减少通讯，缓解DDoS攻击的目的，其中有两个指令比较有帮助：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;proxy_cache_use_statle:告诉nginx，在缓存过期的时候怎么处理，为防止DDoS，这里可以设置为&lt;em&gt;on&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;proxy_cache_key:设置缓存的关键字，默认值（$scheme$proxy_host$request_uri）。&lt;strong&gt;注意：&lt;/strong&gt;如果关键字包含$query_string变量，攻击者就可以发送一些随机query strings导致大量无用缓存信息。所以一般推荐不要加上$query_string参数。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;阻断请求:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;阻断请求&lt;/h2&gt;

&lt;p&gt;可以配置nginx来阻断一些类型的请求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;特别的被攻击的URL&lt;/li&gt;
&lt;li&gt;包含特别的User-Agent头的请求&lt;/li&gt;
&lt;li&gt;包含特别Referer头的请求&lt;/li&gt;
&lt;li&gt;包含其他特别Http内容的请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /foo.php {  #阻断对/foo.php的访问
    deny all;
}

location / { #阻断User-Agent头的值为foo或bar的请求
    if ($http_user_agent ~* foo|bar) {
        return 403;
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$http_*name*变量代指特定的请求头，如$http_user_agent&lt;/p&gt;

&lt;h2 id=&#34;限制到后端服务器的链接:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;限制到后端服务器的链接&lt;/h2&gt;

&lt;p&gt;nginx往往比backend服务器可以处理更大量的并发链接，在nginx上配置backend服务器的链接限制也是个不错的策略：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream website {
    server 192.168.100.1:80 max_conns=200; #最大连接数200
    server 192.168.100.2:80 max_conns=200; 
    queue 10 timeout=30s; #queue:所有服务器都达到最大链接数时的队列数，timeout:多长时间从队列中获取一个请求
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;应对range攻击:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;应对Range攻击&lt;/h2&gt;

&lt;p&gt;一种攻击方式是发送一个http投中Range是很大值的请求，导致缓冲区溢出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET / HTTP/1.1\r\n
Host: stuff\r\n
Range: bytes=0-18446744073709551615\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;应对这种攻击的其中一种方式是使用proxy_set_header指令设置Range为空字符串（&amp;rdquo;&amp;ldquo;），这会让nginx在将请求转发到后端服务器的时候删除Range字段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen 80;

    location / {
        proxy_set_header Range &amp;quot;&amp;quot;;
        proxy_pass http://windowsserver:80;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的应用需要用到byte-range,可以使用下面的方法来检查Range字段的值是否超大：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map $http_range $saferange {
    &amp;quot;~\d{10,}&amp;quot; &amp;quot;&amp;quot;;  # if it matches a string of 10 or more integers, remove it
    default $http_range;
}

server {
    listen 80;

    location / {
            proxy_set_header Range $saferange;
            proxy_pass http://windowsserver:80;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当Range的值超大的时候也可以返回444错误码，让nginx直接关闭连接：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen 80;

    if ($http_range ~ &amp;quot;\d{9,}&amp;quot;) {
        return 444;
    }

    location / {
            proxy_pass http://windowsserver:80;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;处理高负载:8cbe935a207c6e7ff36bf616be0564bc&#34;&gt;处理高负载&lt;/h2&gt;

&lt;p&gt;DDoS攻击通常导致高负载。可以对nginx和操作系统网络配置方面做些优化来处理高负载问题，详细内容见下篇&lt;a href=&#34;http://www.daddyjackyu.com/2015/12/26/ngix-better/&#34;&gt;nginx调优&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;
&lt;a href=&#34;https://www.nginx.com/blog/mitigating-ddos-attacks-with-nginx-and-nginx-plus/&#34;&gt;https://www.nginx.com/blog/mitigating-ddos-attacks-with-nginx-and-nginx-plus/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>学好数量化走遍天下都不怕？</title>
      <link>http://jackyu1978.github.io/2015/12/17/thinks/</link>
      <pubDate>Thu, 17 Dec 2015 23:42:04 +0800</pubDate>
      
      <guid>http://jackyu1978.github.io/2015/12/17/thinks/</guid>
      <description>&lt;p&gt;今天晚上加班和领导过项目进展材料，最后结束的时候领导说&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“杰克，你要和某某好好学习写PPT啊！光技术好还不行，写材料也很重要，要让人一看就知道你想表达什么，重点是什么！,光“学好数理化”还不行，还得语文好，会表达！”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实如果了解28厂的人，在这里写好PPT有多麽重要！这里PPT一般有另一个更好听的名字：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“胶片！”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你能写好“胶片”，那升职加薪不说指日可待，也是迟早的事。“胶片”文化是28厂的一大特色，可以说是各级员工必备看家本领。
举个例子，厂里有段时间也意识到这种风气的泛滥，然后要求各级领导出措施整改。最后各级领导是这么落实的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“小王你写个“胶片”，大家讨论下怎么整改滥用“胶片”的问题”。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然这只是内部流行的一个笑话，但“胶片”文化在28厂可见一般。
写到这里大家可能以为我是批评28厂的“胶片”文化，这是不对的！&lt;/p&gt;

&lt;p&gt;什么事情都写PPT汇报，确实是件很讨厌的事情。但看到别人写出来的东西也确实很佩服，确实写得比我好，条理清晰，有理有据。
这可能跟自己没学好语文确实有关系，现在女儿小学拼音我都不敢辅导，确实够丢脸的，但好在LP语文不错。：）&lt;/p&gt;

&lt;p&gt;不得不承认写PPT也是一个自己思维理顺，逻辑思考的一个过程。不为学PPT而学，先训练自己的思维能力吧。&lt;/p&gt;

&lt;p&gt;现在GitHub的Blog也弄好了。从今天开始，以后就经常写点什么吧&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;争取做一个既能Code,又能吹牛皮，能忽悠的厂工！！！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>